import speech_recognition as sr
import pyttsx3         #For offline use
from gtts import gTTS  #For online use
import pygame          #For playing the mp3 generated by gTTS
import os
from datetime import datetime
import random


#Importing local utilities
from utils.helpers import is_connected

class VoiceAssistant:

    greetings_initialized = [
        "Hello! How can I assist you today?",
        "Hi there! Ready when you are.",
        "Good day! What can I do for you?",
        "Hey! How can I help?",
        "Welcome back! What would you like to know?",
        "Hello! I’m here to help.",
        "Hi! Ask me anything.",
        "Greetings! How may I assist you?",
        "Ready to assist you! What’s on your mind?",
        "Hey! I’m listening."
    ]

    # Responses after giving an answer
    greetings_after_answer = [
        "Hope that helps!",
        "Let me know if you need anything else.",
        "Anything else I can help with?",
        "Feel free to ask me more questions.",
        "Glad I could help!",
        "If you need more info, just ask.",
        "That’s all I have on that — anything else?",
        "Happy to assist anytime.",
        "Let me know if you want me to explain further.",
        "Here whenever you need me."
    ]
    

    def __init__(self, wake_word):
        self.speech_engine = OnlineSpeechEngine() if is_connected() is True else OfflineSpeechEngine() 
        self.speech_recognizer = SpeechRecognizer()
        self.wake_word = wake_word.lower()
    

    def listen_to_wake_word(self):
        text = self.speech_recognizer.recognize_speech(timeout=None, phrase_time_limit=None)
        if isinstance(text, Exception):
            return False
        elif self.wake_word in text.lower():
            return True
        return False
    

    def greet_according_to_time(self):
        current_hour = int(datetime.now().hour)
        print(f"[DEBUG]: Current hour {current_hour}")
        if 0 <= current_hour < 12:
            greeting = 'Good Morning' + " " + "Sir, " + random.choice(self.greetings_initialized).split('!')[1]
        elif 12 <= current_hour < 5:
            greeting = 'Good Afternoon' + " " + "Sir, " + random.choice(self.greetings_initialized).split('!')[1]
        else:
             greeting = 'Good Evening' + " " + "Sir, " + random.choice(self.greetings_initialized).split('!')[1]
        self.speech_engine.speak(greeting)
        
            

class OfflineSpeechEngine:
    """This will handle the text to speech"""
    def __init__(self):
        # We will initialize the engine in speak() for robustness in a loop,
        # but keep a placeholder for initial setup if needed elsewhere.
        self.engine = None 

    def setup_voice(self, engine_instance):
        # Now takes an engine instance to configure
        engine_instance.setProperty('rate', 180)

        voices = engine_instance.getProperty('voices')
        if voices:
            engine_instance.setProperty('voice', voices[0].id)
        else:
            print("Warning: No pyttsx3 voices found. Speech might not work as expected.")

    def speak(self, command):
        # Initialize engine within the speak method for each utterance
        # This ensures a fresh state for each new speech command
        self.engine = pyttsx3.init() 
        self.setup_voice(self.engine)

        self.engine.say(command)
        self.engine.runAndWait()
        
        # Crucially, stop the engine after speaking to release resources and prevent blocking
        # This also helps with consistent behavior in a loop.
        self.engine.stop() 
        self.engine = None # Reset the engine reference


class OnlineSpeechEngine:
    def __init__(self):
        self.language = 'en'

    def speak(self, text):
        if not text:
            return
        try:
            tts = gTTS(text, lang=self.language)
            tts.save('temp.mp3') 

            pygame.mixer.init()
            pygame.mixer.music.load('temp.mp3')
            pygame.mixer.music.play()

            while pygame.mixer.music.get_busy():
                pygame.time.Clock().tick(10)
            
            pygame.mixer.music.unload()
            os.remove("temp.mp3") 

        except Exception as e:
            raise RuntimeError(f"Critical error from Online Engine: {e}")

class SpeechRecognizer:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
    
    def recognize_speech(self, timeout=10, phrase_time_limit = 10):
        try:
            #Obtaining the audio from the microphone as a source
            with self.microphone as source:
                self.recognizer.adjust_for_ambient_noise(source)
                audio = self.recognizer.listen(source, timeout=timeout, phrase_time_limit=phrase_time_limit)  

            #Recognize the audio 
            text = self.recognizer.recognize_google(audio)
            return text
        except sr.WaitTimeoutError:
            return sr.WaitTimeoutError('Time Out')
        except sr.UnknownValueError:
            return sr.UnknownValueError('Could not recognize the audio')
        except sr.RequestError:
            return sr.RequestError('Request Failed to google')
        


#Checking code
if __name__ == "__main__":
    vc1 = VoiceAssistant()
    print("Voice Assistant initialized. Say something to start, or remain silent to quit after timeout.")
    while True:
        recognized_text = vc1.speech_recognizer.recognize_speech()
        if recognized_text is not None:
            # You can add logic here to process the recognized_text
            # For now, it just responds with a fixed phrase
            vc1.speech_engine.speak(recognized_text)
            vc1.speech_engine.speak('Hello')
            vc1.speech_engine.speak('Initializing Jarvis')
        else:
            # If no speech is recognized (e.g., timeout, unknown value), break the loop
            print("No input or recognition error. Exiting.")
            break
